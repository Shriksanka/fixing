import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ConfirmationType } from '../database/entities/confirmation-type.entity';
import { ConfirmationsService } from '../confirmations/confirmations.service';
import { PositionsService } from '../positions/positions.service';
import { TelegramService } from '../telegram/telegram.service';

@Injectable()
export class DecisionService {
  constructor(
    @InjectRepository(ConfirmationType)
    private readonly confirmationTypeRepository: Repository<ConfirmationType>,
    private readonly confirmationsService: ConfirmationsService,
    private readonly positionsService: PositionsService,
    private readonly telegramService: TelegramService,
  ) {}

  private readonly timeframe4hId = 'e6938b7c-c055-4653-82cf-b42b23822e0a';
  private readonly timeframe1dId = 'cc03715b-0b7d-4a39-979d-26b2eb26314a';

  async processAlert({
    symbolId,
    timeframeId,
    typeName,
    price,
  }: {
    symbolId: string;
    timeframeId: string;
    typeName: string;
    price: number;
  }) {
    const type = await this.confirmationTypeRepository.findOne({
      where: { name: typeName },
      relations: ['direction'],
    });

    if (!type) throw new Error(`Unknown confirmation type: ${typeName}`);

    const direction = type.direction.name as 'long' | 'short';
    const directionId = type.direction.id;

    const symbolName =
      await this.confirmationsService.getSymbolNameById(symbolId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –≤–∫–ª—é—á–∞—è –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç–∞
    const saveResult = await this.confirmationsService.saveUniqueConfirmation({
      symbolId,
      timeframeId,
      typeId: type.id,
      price,
    });

    const hasPosition = await this.positionsService.findPosition(
      symbolId,
      direction,
    );

    // üö® –°–ø–µ—Ü-–æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Å—Ç—Ä–∞–¥–∞–ª –ª–∏ –∞–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç
    if (type.antagonist_name) {
      const antagonistType = await this.confirmationTypeRepository.findOne({
        where: { name: type.antagonist_name },
        relations: ['direction'],
      });

      if (antagonistType) {
        const antagonistDirection = antagonistType.direction.name as
          | 'long'
          | 'short';
        const antagonistDirectionId = antagonistType.direction.id;

        const antagCount =
          await this.confirmationsService.countConfirmationsByDirection({
            symbolId,
            timeframeId,
            directionId: antagonistDirectionId,
          });

        const activePosition = await this.positionsService.findPosition(
          symbolId,
          antagonistDirection,
        );

        if (antagCount < 3 && activePosition) {
          await this.telegramService.sendMessage(
            `üì§ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ${antagonistDirection.toUpperCase()} –ø–æ ${price} –¥–ª—è ${symbolName}\n–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (<3)\n–¢–∞–π–º—Ñ—Ä–µ–π–º: 15M`,
          );
          return this.positionsService.exitPosition({
            symbolId,
            direction: antagonistDirection,
            price,
            reason: 'too_few_confirmations',
          });
        }
      }
    }

    // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª ‚Äî Exit Buy/Sell
    if (type.name === 'Exit Buy' || type.name === 'Exit Sell') {
      await this.confirmationsService.clearDirectionConfirmations({
        symbolId,
        timeframeId,
        directionId,
      });

      if (hasPosition) {
        await this.telegramService.sendMessage(
          `üì§ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ${direction.toUpperCase()} –ø–æ ${symbolName} @ ${price}\n–ü—Ä–∏—á–∏–Ω–∞: —Å–∏–≥–Ω–∞–ª ${type.name}`,
        );

        return this.positionsService.exitPosition({
          symbolId,
          direction,
          price,
          reason: 'exit_signal',
        });
      }

      return { status: 'exit_skipped', reason: 'no_active_position' };
    }

    // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –≤—Ö–æ–¥
    const count = await this.confirmationsService.countConfirmationsByDirection(
      {
        symbolId,
        timeframeId,
        directionId,
      },
    );

    if (count >= 4) {
      const tf4h = await this.confirmationsService.getDominantDirection(
        symbolId,
        this.timeframe4hId,
      );
      const tf1d = await this.confirmationsService.getDominantDirection(
        symbolId,
        this.timeframe1dId,
      );

      if (tf4h !== direction || tf1d !== direction) {
        return {
          status: 'blocked_by_trend',
          message: `‚ùå –¢—Ä–µ–Ω–¥ 4H (${tf4h}) –∏–ª–∏ 1D (${tf1d}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º ${direction}`,
        };
      }

      const confirmations15m =
        await this.confirmationsService.getConfirmationsWithTypesAndDirections({
          symbolId,
          timeframeId,
        });
      const signals15m = confirmations15m
        .filter((c) => c.type.direction.name === direction)
        .map((c) => c.type.name);

      const confirmations4h =
        await this.confirmationsService.getConfirmationsWithTypesAndDirections({
          symbolId,
          timeframeId: this.timeframe4hId,
        });
      const signals4h = confirmations4h
        .filter((c) => c.type.direction.name === tf4h)
        .map((c) => c.type.name);

      const confirmations1d =
        await this.confirmationsService.getConfirmationsWithTypesAndDirections({
          symbolId,
          timeframeId: this.timeframe1dId,
        });
      const signals1d = confirmations1d
        .filter((c) => c.type.direction.name === tf1d)
        .map((c) => c.type.name);

      const msg = `
      üì• –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ${direction.toUpperCase()} –ø–æ ${price} –¥–ª—è ${symbolName}
      üìå –ü—Ä–∏—á–∏–Ω–∞: >=5 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–∞ 15M + —Ç—Ä–µ–Ω–¥ 4H/1D —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      ‚Äî 1D (${tf1d}): ${signals1d.join(', ') || '‚Äî'}
      ‚Äî 4H (${tf4h}): ${signals4h.join(', ') || '‚Äî'}
      ‚Äî 15M (${direction}): ${signals15m.join(', ') || '‚Äî'}
      `;

      await this.telegramService.sendMessage(msg.trim());

      if (!hasPosition) {
        return this.positionsService.enterPosition({
          symbolId,
          direction,
          price,
          reason: 'entry',
        });
      }

      return { status: 'already_in_position' };
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    if (count < 3 && hasPosition) {
      await this.telegramService.sendMessage(
        `üì§ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ${direction.toUpperCase()} –ø–æ ${symbolName} @ ${price}\n–ü—Ä–∏—á–∏–Ω–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π <3 –Ω–∞ 15M`,
      );

      return this.positionsService.exitPosition({
        symbolId,
        direction,
        price,
        reason: 'too_few_confirmations',
      });
    }

    return { status: 'exit_skipped', reason: 'no_active_position' };
  }

  async getConfirmationsWithTypesAndDirections({
    symbolId,
    timeframeId,
  }: {
    symbolId: string;
    timeframeId: string;
  }) {
    return this.confirmationsService.getConfirmationsWithTypesAndDirections({
      symbolId,
      timeframeId,
    });
  }
}
